{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Letter","letter","color","style","wordRe","RegExp","words","Date","now","match","map","w","toLocaleUpperCase","uniqueWords","Set","uniqueSyll","flatMap","syllabifyWord","separator","split","ColorLetters","text","res","s","syllabify","i","length","charAt","ll","toLowerCase","indexOf","push","key","className","trgt","filter","x","ShowWord","ary","useState","Math","random","cnt","setCnt","history","useHistory","index","useParams","fontSize","onClick","goBack","Number","App","path","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,6JCe3C,SAASC,EAAT,GAAkC,IAAjBC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,MACvB,OAAO,0BAAMC,MAAO,CAACD,MAAOA,IAASD,GAGvC,IAQMG,EAASC,OAAO,kNAA2C,MAI3DC,GAFIC,KAAKC,MACP,4p6rFACSC,MAAML,GAAQM,KAAI,SAAAC,GAAC,OAAIA,EAAEC,wBACpCC,EAAW,YAAO,IAAIC,IAAIR,IAC1BS,EAAU,YAAO,IAAID,IAAID,EAAYG,SAAQ,SAAAL,GAAC,OAAIM,wBAAcN,EAAG,CAACO,UAAW,MAAMC,MAAM,UAEvFZ,KAAKC,MAEf,SAASY,EAAT,GAGE,IAH6B,IAARC,EAAO,EAAPA,KACfC,EAAM,GACNC,EAAIC,oBAAUH,GACXI,EAAI,EAAGA,EAAIF,EAAEG,OAAQD,IAAK,CACjC,IAEIvB,EAFED,EAASsB,EAAEI,OAAOF,GAClBG,EAAK3B,EAAO4B,cAGhB3B,EA1BQ,+DAyBA4B,QAAQF,IAAO,EACf,aACCH,EAAIF,EAAEG,OAAS,GA1BZ,iCA0B2BI,QAAQP,EAAEI,OAAOF,EAAE,GAAGI,gBAAkB,EACvE,QAEA,YAEVP,EAAIS,KAAK,kBAAC/B,EAAD,CAAQgC,IAAKP,EAAGxB,OAAQA,EAAQC,MAAOA,KAElD,OAAO,0BAAM+B,UAAU,eAAeX,GAQxC,IAAMY,EAAOnB,EAAWoB,QAAO,SAAAC,GAAC,OAAc,GAAVA,EAAEV,UAMtC,SAASW,EAAT,GAAyB,EAANC,IAAO,IAAD,EACDC,oBAAS,kBAAMC,KAAKC,YADnB,gCAEDF,mBAAS,IAFR,mBAEhBG,EAFgB,KAEXC,EAFW,KAGnBC,EAAUC,cACRC,EAAUC,cAAVD,MAEN,OAAO,oCACL,kBAAC1B,EAAD,CAAcC,KAAMa,EAAKY,KAAS,6BAClC,uBAAG3C,MAAO,CAAC6C,SAAU,QAASF,GAC9B,4BAAQ3C,MAAO,CAAC6C,SAAU,QAASC,QAAS,kBAAML,EAAQM,WAA1D,MACA,4BAAQ/C,MAAO,CAAC6C,SAAU,QAASC,QAAS,WAAQN,EAAOD,EAAI,GAAIE,EAAQb,KAAK,KAAK,EAAEoB,OAAOL,IAAQZ,EAAKR,UAA3G,OAqBW0B,MAdf,WACE,OACE,yBAAKnB,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoB,KAAK,WACV,kBAAChB,EAAD,CAAUC,IAAKJ,SC9EPoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAShD,MACvB,2DCZNiD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.05cfa452.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useHistory,\n  useParams,\n  Redirect\n} from \"react-router-dom\";\nimport logo from './logo.svg';\nimport { syllabify, syllabifyWord } from 'syllables-ru';\nimport './App.css';\nimport raw from 'raw.macro';\n\nfunction Letter({letter, color}) {\n  return <span style={{color: color}}>{letter}</span>;\n}\n\nconst vowel = 'аеёиоуыэюя'; // Гласные буквы\nconst softvowel = \"еёиюя\";\nconst voiced = 'бвгджзлмнрхцчшщ'; // Звонкие и шипящие согласные\nconst deaf = 'кпстф'; // Глухие согласные\nconst brief = 'й'; // Й\nconst other = 'ьъ'; // Другие\nconst cons = 'бвгджзйклмнпрстфхцчшщ'; // Все согласные\n\nconst wordRe = RegExp(\"[\" + vowel + brief + other + cons + \"]+\", \"ig\")\n\nconst a = Date.now();\nconst eo = raw('./eo2.txt');\nconst words = eo.match(wordRe).map(w => w.toLocaleUpperCase());\nconst uniqueWords = [...new Set(words)];\nconst uniqueSyll = [...new Set(uniqueWords.flatMap(w => syllabifyWord(w, {separator: \" \"}).split(\" \")))]\n\nconst b = Date.now();\n\nfunction ColorLetters({text}) {\n  const res = [];\n  const s = syllabify(text);\n  for (var i = 0; i < s.length; i++) {\n    const letter = s.charAt(i);\n    const ll = letter.toLowerCase();\n    var color;\n    if (vowel.indexOf(ll) > -1) {\n      color = 'lightcoral';\n    } else if (i < s.length - 1 && softvowel.indexOf(s.charAt(i+1).toLowerCase()) > -1) {\n      color = \"green\";\n    } else {\n      color = \"royalblue\";\n    }\n    res.push(<Letter key={i} letter={letter} color={color}/>);\n  }\n  return <span className=\"App-letters\">{res}</span>;\n}\n\nfunction randomInt(rnd, min, max) {\n\treturn min + Math.floor((max - min) * rnd);\n}\n\n//const trgt = uniqueWords.filter(x=> x.length<5 && x.toLowerCase().indexOf('а') ==-1); //uniqueSyll.filter(x=>x.length>5);\nconst trgt = uniqueSyll.filter(x => x.length==2);\n//const trgt = [...new Set(eo.toUpperCase().match(RegExp(\"[\" + cons + \"][\" + vowel + \"]\", \"ig\")))]\n//const trgt = [...new Set(eo.toUpperCase().match(RegExp(\"[\" + vowel + \"][\" + cons + \"]\", \"ig\")))]\n//const trgt = [...new Set(eo.toUpperCase().match(RegExp(\"([\" + cons + \"][\" + vowel + \"]|[\" + vowel + \"][\" + cons + \"])\", \"ig\")))]\n//const trgt = uniqueWords.filter(w => w.length == 4 && syllabifyWord(w, {separator: \" \"}).split(\" \").filter(n => n.length != 2).length == 0);\n\nfunction ShowWord({ary}) {\n  const [rnd, setRnd] = useState(() => Math.random());\n  const [cnt, setCnt] = useState(0);\n  let history = useHistory();\n  let { index } = useParams();\n\n  return <>\n    <ColorLetters text={trgt[index]}/><br/>\n    <p style={{fontSize: \"2em\"}}>{index}</p>\n    <button style={{fontSize: \"10em\"}} onClick={() => history.goBack()}>&lt;&lt;</button>\n    <button style={{fontSize: \"10em\"}} onClick={() => { setCnt(cnt+1); history.push(\"/\"+(1+Number(index))%trgt.length)}}>&gt;&gt;</button>\n  </>;\n}\n\n//<button style={{fontSize: \"10em\"}} onClick={() => { setCnt(cnt+1); history.push(\"/\"+randomInt(Math.random(), 0, trgt.length))}}>&gt;&gt;</button>\n// <button style={{fontSize: \"10em\"}} onClick={() => { setRnd(Math.random()); setCnt(cnt+1);}}>&gt;&gt;</button>\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/:index\">\n            <ShowWord ary={trgt}/>\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}